namespace UnAd.Kafka {
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    using Confluent.Kafka;

    internal sealed class ClientEventSerializer : ISerializer<ClientEvent> {
        public byte[] Serialize(ClientEvent data, SerializationContext context) =>
            JsonSerializer.SerializeToUtf8Bytes(data, ClientEventSerializerContext.Default.ClientEvent);
    }

    internal sealed class ClientEventDeserializer : IDeserializer<ClientEvent> {
        public ClientEvent Deserialize(ReadOnlySpan<byte> data, bool isNull, SerializationContext context) =>
            isNull
            || Encoding.UTF8.GetString(data).Equals("null", StringComparison.OrdinalIgnoreCase)
                ? new ClientEvent()
                : JsonSerializer.Deserialize(data, ClientEventSerializerContext.Default.ClientEvent)
                    ?? throw new InvalidOperationException("Failed to deserialize event");
    }

    internal sealed class ClientKeySerializer : ISerializer<ClientKey> {
        public byte[] Serialize(ClientKey data, SerializationContext context) =>
            JsonSerializer.SerializeToUtf8Bytes(data, ClientEventSerializerContext.Default.ClientEvent);
    }

    internal sealed class ClientKeytDeserializer : IDeserializer<ClientKey> {
        public ClientKey Deserialize(ReadOnlySpan<byte> data, bool isNull, SerializationContext context) =>
            isNull
            || Encoding.UTF8.GetString(data).Equals("null", StringComparison.OrdinalIgnoreCase)
                ? new ClientKey(string.Empty)
                : JsonSerializer.Deserialize(data, ClientKeySerializerContext.Default.ClientKey)
                    ?? throw new InvalidOperationException("Failed to deserialize event");
    }

    [JsonSourceGenerationOptions(
        PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]
    [JsonSerializable(typeof(ClientEvent))]
    internal sealed partial class ClientEventSerializerContext : JsonSerializerContext { }

    [JsonSourceGenerationOptions(
        PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]
    [JsonSerializable(typeof(ClientKey))]
    internal sealed partial class ClientKeySerializerContext : JsonSerializerContext { }
}
